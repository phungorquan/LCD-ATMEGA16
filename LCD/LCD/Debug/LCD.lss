
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001ca  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bcb  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072f  00000000  00000000  00000f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042e  00000000  00000000  00001636  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  00001b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000464  00000000  00000000  00001f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000023e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  7a:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z9Write2Nibh>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	28 b3       	in	r18, 0x18	; 24
  84:	2f 70       	andi	r18, 0x0F	; 15
  86:	98 2f       	mov	r25, r24
  88:	90 7f       	andi	r25, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	98 bb       	out	0x18, r25	; 24
  8e:	c2 9a       	sbi	0x18, 2	; 24
  90:	c2 98       	cbi	0x18, 2	; 24
  92:	30 e1       	ldi	r19, 0x10	; 16
  94:	83 9f       	mul	r24, r19
  96:	c0 01       	movw	r24, r0
  98:	11 24       	eor	r1, r1
  9a:	82 2b       	or	r24, r18
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	c2 9a       	sbi	0x18, 2	; 24
  a0:	c2 98       	cbi	0x18, 2	; 24
  a2:	08 95       	ret

000000a4 <_Z8init_LCDv>:
	
}

void init_LCD()
{
	DDR_CTRL=0xFF;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	87 bb       	out	0x17, r24	; 23
	DDR_DATA=0xFF;
  a8:	87 bb       	out	0x17, r24	; 23
	
	//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
  aa:	c0 98       	cbi	0x18, 0	; 24
	cbi(CTRL, RW); // AVR->LCD
  ac:	c1 98       	cbi	0x18, 1	; 24
	cbi(CTRL, EN);
  ae:	c2 98       	cbi	0x18, 2	; 24
	
	sbi(CTRL,EN); //enable
  b0:	c2 9a       	sbi	0x18, 2	; 24
	sbi(DATA_O, 5);
  b2:	c5 9a       	sbi	0x18, 5	; 24
	cbi(CTRL,EN); //disable
  b4:	c2 98       	cbi	0x18, 2	; 24
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	80 e7       	ldi	r24, 0x70	; 112
  ba:	92 e0       	ldi	r25, 0x02	; 2
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <_Z8init_LCDv+0x18>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z8init_LCDv+0x22>
  c6:	00 00       	nop
	wait_LCD();
	Write2Nib(0x28);//4 bit mode 2line, 5x8 font
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	80 e7       	ldi	r24, 0x70	; 112
  d2:	92 e0       	ldi	r25, 0x02	; 2
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <_Z8init_LCDv+0x30>
  dc:	00 c0       	rjmp	.+0      	; 0xde <_Z8init_LCDv+0x3a>
  de:	00 00       	nop
	wait_LCD();
	
	//Display control-------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
  e0:	c0 98       	cbi	0x18, 0	; 24
	Write2Nib(0x0E); //not Cursor display, 0x0E: with cursor
  e2:	8e e0       	ldi	r24, 0x0E	; 14
  e4:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	80 e7       	ldi	r24, 0x70	; 112
  ec:	92 e0       	ldi	r25, 0x02	; 2
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <_Z8init_LCDv+0x4a>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_Z8init_LCDv+0x54>
  f8:	00 00       	nop
	wait_LCD();

	//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
  fa:	c0 98       	cbi	0x18, 0	; 24
	Write2Nib(0x06);
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	80 e7       	ldi	r24, 0x70	; 112
 106:	92 e0       	ldi	r25, 0x02	; 2
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <_Z8init_LCDv+0x64>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_Z8init_LCDv+0x6e>
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <_Z7clr_LCDv>:

}

void clr_LCD() // xoa LCD
{
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 116:	c0 98       	cbi	0x18, 0	; 24
	Write2Nib(0x01);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	80 e7       	ldi	r24, 0x70	; 112
 122:	92 e0       	ldi	r25, 0x02	; 2
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <_Z7clr_LCDv+0xe>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <_Z7clr_LCDv+0x18>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <_Z8move_LCDhh>:

void move_LCD(uint8_t y,uint8_t x)
{
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; // tinh ma lenh
	cbi(CTRL,RS); // the following data is COMMAND
 132:	c0 98       	cbi	0x18, 0	; 24
	Write2Nib(Ad);
 134:	20 e4       	ldi	r18, 0x40	; 64
 136:	82 9f       	mul	r24, r18
 138:	60 0d       	add	r22, r0
 13a:	11 24       	eor	r1, r1
 13c:	86 2f       	mov	r24, r22
 13e:	81 5c       	subi	r24, 0xC1	; 193
 140:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	90 e7       	ldi	r25, 0x70	; 112
 148:	22 e0       	ldi	r18, 0x02	; 2
 14a:	81 50       	subi	r24, 0x01	; 1
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	20 40       	sbci	r18, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <_Z8move_LCDhh+0x18>
 152:	00 c0       	rjmp	.+0      	; 0x154 <_Z8move_LCDhh+0x22>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <_Z11putChar_LCDh>:

}

void putChar_LCD(uint8_t chr)  // output character 1 by 1
{
	sbi(CTRL,RS); //this is a normal DATA
 158:	c0 9a       	sbi	0x18, 0	; 24
	Write2Nib(chr);
 15a:	0e 94 41 00 	call	0x82	; 0x82 <_Z9Write2Nibh>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	80 e7       	ldi	r24, 0x70	; 112
 162:	92 e0       	ldi	r25, 0x02	; 2
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <_Z11putChar_LCDh+0xc>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <_Z11putChar_LCDh+0x16>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <_Z9print_LCDPc>:
	wait_LCD();
}

void print_LCD(char* str)   // output a string
{
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	fc 01       	movw	r30, r24
	unsigned char i;
	for (i=0; str[i]!=0; i++)
 17a:	80 81       	ld	r24, Z
 17c:	88 23       	and	r24, r24
 17e:	59 f0       	breq	.+22     	; 0x196 <_Z9print_LCDPc+0x24>
 180:	8f 01       	movw	r16, r30
 182:	c0 e0       	ldi	r28, 0x00	; 0
	{ putChar_LCD(str[i]);}
 184:	0e 94 ac 00 	call	0x158	; 0x158 <_Z11putChar_LCDh>
}

void print_LCD(char* str)   // output a string
{
	unsigned char i;
	for (i=0; str[i]!=0; i++)
 188:	cf 5f       	subi	r28, 0xFF	; 255
 18a:	f8 01       	movw	r30, r16
 18c:	ec 0f       	add	r30, r28
 18e:	f1 1d       	adc	r31, r1
 190:	80 81       	ld	r24, Z
 192:	81 11       	cpse	r24, r1
 194:	f7 cf       	rjmp	.-18     	; 0x184 <_Z9print_LCDPc+0x12>
	{ putChar_LCD(str[i]);}
}
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <main>:

int main(void)
{
    /* Replace with your application code */
	
	init_LCD(); // khoi dong LCD
 19e:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z8init_LCDv>
	clr_LCD(); // xoa noi dung LCD
 1a2:	0e 94 8b 00 	call	0x116	; 0x116 <_Z7clr_LCDv>
	
	move_LCD(1,7);	// di chuyen den dong 1 bat dau tu ki tu thu 7
 1a6:	67 e0       	ldi	r22, 0x07	; 7
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 99 00 	call	0x132	; 0x132 <_Z8move_LCDhh>
	putChar_LCD('X'); // Xuat ky tu X
 1ae:	88 e5       	ldi	r24, 0x58	; 88
 1b0:	0e 94 ac 00 	call	0x158	; 0x158 <_Z11putChar_LCDh>
	move_LCD(2,1);	// di chuyen den dong 2 bat dau tu ki tu thu 1
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 99 00 	call	0x132	; 0x132 <_Z8move_LCDhh>
	print_LCD("Input_a_string!"); // Xuat ra mot chuoi  (string length <= 15)
 1bc:	80 e6       	ldi	r24, 0x60	; 96
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 b9 00 	call	0x172	; 0x172 <_Z9print_LCDPc>
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <main+0x26>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
